{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django Prune Media","text":"<p>A Django app that provides management commands for pruning unused media files.</p> <p> </p>"},{"location":"#installation","title":"Installation","text":"<pre><code>uv add django-prune-media\n</code></pre> <p>Add it to your settings.py.</p> <pre><code>INSTALLED_APPS = [..., \"prune_media\", ...]\n</code></pre> <p>Warning</p> <p>This application assumes you are not using the same storage for your static and media files. It will look at whatever storage you have configured for <code>default</code>. If you are commingling them, i.e. not using a separate \"staticfiles\" entry in STORAGES, this can result in false positives.</p> <p>Usage:</p> <p>To list or delete the media to be pruned:</p> <pre><code>$ python manage.py prune_media --help\n\n Usage: django-admin prune_media [OPTIONS]\n\n Remove unreferenced media files to save space.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --no-interaction    --no-no-interaction      Don't ask for confirmation before deleting. [default: no-no-interaction]             \u2502\n\u2502 --dry-run           --no-dry-run             Do a dry-run without deleting anything. [default: no-dry-run]                        \u2502\n\u2502 --help                                       Show this message and exit.                                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Django \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version                  Show program's version number and exit.                                                                \u2502\n\u2502 --settings           TEXT  The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the      \u2502\n\u2502                            DJANGO_SETTINGS_MODULE environment variable will be used.                                              \u2502\n\u2502 --pythonpath         PATH  A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\". [default: None]          \u2502\n\u2502 --traceback                Raise on CommandError exceptions                                                                       \u2502\n\u2502 --no-color                 Don't colorize the command output.                                                                     \u2502\n\u2502 --force-color              Force colorization of the command output.                                                              \u2502\n\u2502 --skip-checks              Skip system checks.                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Or to find empty directories:</p> <pre><code>$ python manage.py show_empty_media_dirs\n\nUsage: django-admin show_empty_media_dirs [OPTIONS]\n\n List empty media directories.\n The storage API does not support deletion of directories but at least this way you know what can be removed.\n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --clean    --no-clean      Print paths only so they can be piped to other commands [default: no-clean]                            \u2502\n\u2502 --help                     Show this message and exit.                                                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Django \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --version                  Show program's version number and exit.                                                                \u2502\n\u2502 --settings           TEXT  The Python path to a settings module, e.g. \"myproject.settings.main\". If this isn't provided, the      \u2502\n\u2502                            DJANGO_SETTINGS_MODULE environment variable will be used.                                              \u2502\n\u2502 --pythonpath         PATH  A directory to add to the Python path, e.g. \"/home/djangoprojects/myproject\". [default: None]          \u2502\n\u2502 --traceback                Raise on CommandError exceptions                                                                       \u2502\n\u2502 --no-color                 Don't colorize the command output.                                                                     \u2502\n\u2502 --force-color              Force colorization of the command output.                                                              \u2502\n\u2502 --skip-checks              Skip system checks.                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"#faq","title":"FAQ","text":""},{"location":"#why-another-app-for-this","title":"Why another app for this?","text":"<p>Most of the apps I've found operate from the assumption that you are using Django's FileSystemStorage which is often not the case in production. If you're hosting your media files via a CDN, <code>os.walk</code> is not going to work for you.</p> <p>This application solely uses the Django Storage API, which means it works for custom backends like Django Storages too.</p>"},{"location":"#what-are-the-limitations","title":"What are the limitations?","text":"<p>Django's Storage API doesn't support deleting anything other than files, so you can end up with empty directories. This is why the <code>show_empty_media_dirs</code> command exists. When using the <code>--clean</code> option you can pipe the results to a command that's appropriate to your setup.</p>"},{"location":"#should-i-use-this","title":"Should I use this?","text":"<p>\ud83e\udd37\u200d\u2642\ufe0f</p> <p>I made this because I didn't want to keep copying this between projects. I want to make it as useful as possible though so contributions, even if it's only a failing test case for me to fix, are very welcome!</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#012","title":"0.1.2","text":"<p>Compare the full difference</p> <ul> <li>Add important warning to README for any install.</li> </ul>"},{"location":"changelog/#011","title":"0.1.1","text":"<p>Compare the full difference</p> <ul> <li>Improved project documentation</li> </ul>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at daniel@andrlik.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"How to contribute","text":"<p>Contributions to either the code, localization, or the documentation are very welcome!</p>"},{"location":"contributing/#development-task-runner","title":"Development task runner","text":"<p>We use <code>just</code> to execute common tasks. It is available for any platform. Once installed, you can see a list of available commands by running <code>just --list</code>.</p>"},{"location":"contributing/#dependencies","title":"Dependencies","text":"<p>We use <code>uv</code> to manage the Python dependencies. If you don't have <code>uv</code>, you should install with <code>just uv-install</code>.</p> <p>To install dependencies and prepare <code>pre-commit</code> hooks you would need to run the <code>setup</code> command:</p> <pre><code>just bootstrap\n</code></pre>"},{"location":"contributing/#running-updates","title":"Running updates","text":"<p>After pulling new updates from the repository you can quickly install updated dependencies and run database migrations by running <code>just bootstrap</code>.</p>"},{"location":"contributing/#codestyle","title":"Codestyle","text":"<p>After installation you may execute code formatting.</p> <pre><code>just fmt\n</code></pre>"},{"location":"contributing/#checks","title":"Checks","text":"<p>Many checks are configured for this project.</p> <p>To run your test suite:</p> <pre><code>just test\n</code></pre> <p>Or you can run testing for linting and multiple supported Python versions via:</p> <pre><code>just tox\n</code></pre> <p>To use pyright for type checking run: <pre><code>just check-types\n</code></pre></p> <p>To run linting:</p> <pre><code>just check\n</code></pre> <p>The <code>just safety</code> command will look at the security of your code.</p>"},{"location":"contributing/#before-submitting","title":"Before submitting","text":"<p>Before submitting your code please do the following steps:</p> <ol> <li>Add any changes you want</li> <li>Add tests for the new changes</li> <li>Edit documentation if you have changed something significant</li> <li>Run <code>just fmt</code> to format your changes.</li> <li>Run <code>just check</code> to ensure that types, security and docstrings are okay.</li> <li>Add your name to the <code>CONTRIBUTERS.txt</code> file.</li> </ol>"},{"location":"contributing/#other-help","title":"Other help","text":"<p>You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.</p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#reporting-security-issues","title":"\ud83d\udd10 Reporting Security Issues","text":"<p>Do not open issues that might have security implications!</p> <p>It is critical that security related issues are reported privately so we have time to address them before they become public knowledge.</p> <p>Vulnerabilities can be reported by submitting a private advisory via Github.</p> <p>Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:</p> <ul> <li>Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)</li> <li>Full paths of source file(s) related to the manifestation of the issue</li> <li>The location of the affected source code (tag/branch/commit or direct URL)</li> <li>Any special configuration required to reproduce the issue</li> <li>Environment (e.g. Linux / Windows / macOS)</li> <li>Step-by-step instructions to reproduce the issue</li> <li>Proof-of-concept or exploit code (if possible)</li> <li>Impact of the issue, including how an attacker might exploit the issue</li> </ul> <p>This information will help us triage your report more quickly.</p>"},{"location":"security/#preferred-languages","title":"Preferred Languages","text":"<p>We prefer all communications to be in English.</p>"},{"location":"reference/prune_media/apps/","title":"apps","text":""},{"location":"reference/prune_media/apps/#src.prune_media.apps.check_for_media","title":"check_for_media","text":"<pre><code>check_for_media(app_configs, **kwargs)\n</code></pre> <p>Run checks to ensure that MEDIA_ROOT exists and that the configured storage backend has implemented listdir.</p> Source code in <code>src/prune_media/apps.py</code> <pre><code>@register()\ndef check_for_media(app_configs, **kwargs):  # noqa: ARG001\n    \"\"\"Run checks to ensure that MEDIA_ROOT exists and that the\n    configured storage backend has implemented listdir.\"\"\"\n    errors = []\n    try:\n        dirs, files = default_storage.listdir(\".\")\n    except FileNotFoundError as fnf:\n        msg = \"Your media root does not exist!\"\n        errors.append(Error(msg, hint=str(fnf)))\n    except NotImplementedError as nie:\n        msg = \"Your storage backend does not support listdir!\"\n        errors.append(Error(msg, hint=str(nie)))\n    return errors\n</code></pre>"},{"location":"reference/prune_media/utils/","title":"utils","text":""},{"location":"reference/prune_media/utils/#src.prune_media.utils.DirectoryTree","title":"DirectoryTree  <code>dataclass</code>","text":"<pre><code>DirectoryTree(path: str, files: list[str], children: list[DirectoryTree])\n</code></pre> <p>This dataclass is used as Storage backends in Django are not guaranteed to support os.walk type functionality.</p> Attrs <p>path (str): The relative path of the directory as a string. files (str): A list of filenames contained in the directory. children (list[DirectoryTree]): A list of DirectoryTree objects representing child     directories.</p>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.DirectoryTree.get_empty_child_directories","title":"get_empty_child_directories","text":"<pre><code>get_empty_child_directories() -&gt; list[str]\n</code></pre> <p>Get a list of empty child directories within the tree.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of empty child directory paths as strings</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_empty_child_directories(self) -&gt; list[str]:\n    \"\"\"\n    Get a list of empty child directories within the tree.\n\n    Returns:\n        list[str]: list of empty child directory paths as strings\n    \"\"\"\n    if len(self.children) == 0:\n        return []\n    empty_directories = []\n    for child in self.children:\n        if not child.files and not child.children:\n            empty_directories.append(child.path)\n        else:\n            empty_directories += child.get_empty_child_directories()\n    return empty_directories\n</code></pre>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.DirectoryTree.get_file_paths","title":"get_file_paths","text":"<pre><code>get_file_paths() -&gt; list[str]\n</code></pre> <p>Get a list of all file paths within the tree</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of file paths as strings</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_file_paths(self) -&gt; list[str]:\n    \"\"\"\n    Get a list of all file paths within the tree\n\n    Returns:\n        list[str]: list of file paths as strings\n    \"\"\"\n    file_paths = [\n        f\"{self.path}/{file}\" if file != \"\" else file for file in self.files\n    ]\n    for child in self.children:\n        file_paths += child.get_file_paths()\n    return file_paths\n</code></pre>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.get_all_file_fields","title":"get_all_file_fields","text":"<pre><code>get_all_file_fields() -&gt; list[tuple[str, str, str]]\n</code></pre> <p>Get all fields in the project where a field is an instance or subclass of django.db.models.FileField.</p> <p>Returns:</p> Type Description <code>list[tuple[str, str, str]]</code> <p>list[tuple[str, str, str]]: list of fields as tuples with \"app_label\", \"model_name\", \"field_name\"</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_all_file_fields() -&gt; list[tuple[str, str, str]]:\n    \"\"\"\n    Get all fields in the project where a field is an instance or\n    subclass of django.db.models.FileField.\n\n    Returns:\n        list[tuple[str, str, str]]: list of fields as tuples with \"app_label\",\n            \"model_name\", \"field_name\"\n    \"\"\"\n    file_fields = []\n    for app, model_dict in apps.all_models.items():\n        if model_dict:\n            for model_name, model in model_dict.items():\n                for field in model._meta.fields:\n                    if isinstance(field, FileField):\n                        file_fields.append((app, model_name, field.name))\n    return file_fields\n</code></pre>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.get_empty_media_directories","title":"get_empty_media_directories","text":"<pre><code>get_empty_media_directories(storage_backend: Storage = default_storage) -&gt; list[str]\n</code></pre> <p>Get a list of empty media directories found in the supplied storage instance.</p> <p>Parameters:</p> Name Type Description Default <code>storage_backend</code> <code>Storage</code> <p>a Django Storage instance</p> <code>default_storage</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of empty media directory paths as strings</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_empty_media_directories(\n    storage_backend: Storage = default_storage,\n) -&gt; list[str]:\n    \"\"\"Get a list of empty media directories found in the supplied storage instance.\n\n    Args:\n        storage_backend (Storage): a Django Storage instance\n\n    Returns:\n        list[str]: list of empty media directory paths as strings\n    \"\"\"\n    dirs, files = storage_backend.listdir(\".\")\n    dir_tree = DirectoryTree(path=\"\", files=files, children=[])\n    for directory in dirs:\n        dir_tree.add_child(directory, storage=storage_backend)\n    return dir_tree.get_empty_child_directories()\n</code></pre>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.get_media_paths","title":"get_media_paths","text":"<pre><code>get_media_paths(storage_backend: Storage = default_storage) -&gt; list[str]\n</code></pre> <p>Get a list of all media files found in the supplied storage instance.</p> <p>Parameters:</p> Name Type Description Default <code>storage_backend</code> <code>Storage</code> <p>a Django Storage instance</p> <code>default_storage</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of media file paths as strings</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_media_paths(storage_backend: Storage = default_storage) -&gt; list[str]:\n    \"\"\"\n    Get a list of all media files found in the supplied storage instance.\n\n    Args:\n        storage_backend (Storage): a Django Storage instance\n\n    Returns:\n        list[str]: list of media file paths as strings\n    \"\"\"\n    dirs, files = storage_backend.listdir(\".\")\n    dir_tree = DirectoryTree(path=\"\", files=files, children=[])\n    for directory in dirs:\n        dir_tree.add_child(directory, storage=storage_backend)\n    return dir_tree.get_file_paths()\n</code></pre>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.get_referenced_file_paths","title":"get_referenced_file_paths","text":"<pre><code>get_referenced_file_paths(fields: list[tuple[str, str, str]]) -&gt; list[str]\n</code></pre> <p>Get a list of all file paths from the supplied field data.</p> <p>Parameters:</p> Name Type Description Default <code>fields</code> <code>list[tuple[str, str, str]]</code> <p>list of fields as tuples with \"app_label\",  \"model_name\", \"field_name\"</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of file paths as strings</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_referenced_file_paths(fields: list[tuple[str, str, str]]) -&gt; list[str]:\n    \"\"\"\n    Get a list of all file paths from the supplied field data.\n\n    Args:\n        fields (list[tuple[str, str, str]]): list of fields as tuples with \"app_label\",\n             \"model_name\", \"field_name\"\n\n    Returns:\n        list[str]: list of file paths as strings\n    \"\"\"\n    filepaths = []\n    for model_spec in fields:\n        app_label = model_spec[0]\n        model_name = model_spec[1]\n        field_name = model_spec[2]\n        model = apps.get_model(app_label=app_label, model_name=model_name)\n        filepaths += model.objects.filter(\n            **{f\"{field_name}__isnull\": False}\n        ).values_list(field_name, flat=True)\n    return filepaths\n</code></pre>"},{"location":"reference/prune_media/utils/#src.prune_media.utils.get_unreferenced_media_paths","title":"get_unreferenced_media_paths","text":"<pre><code>get_unreferenced_media_paths(storage_backend: Storage = default_storage) -&gt; list[str]\n</code></pre> <p>Get a list of media files that are not referenced by Django FileFields</p> <p>Parameters:</p> Name Type Description Default <code>storage_backend</code> <code>Storage</code> <p>a Django Storage instance</p> <code>default_storage</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: list of media file paths as strings</p> Source code in <code>src/prune_media/utils.py</code> <pre><code>def get_unreferenced_media_paths(\n    storage_backend: Storage = default_storage,\n) -&gt; list[str]:\n    \"\"\"Get a list of media files that are not referenced by Django FileFields\n\n    Args:\n        storage_backend (Storage): a Django Storage instance\n\n    Returns:\n        list[str]: list of media file paths as strings\n\n    \"\"\"\n    media_paths = get_media_paths(storage_backend=storage_backend)\n    return [\n        path\n        for path in media_paths\n        if path not in get_referenced_file_paths(get_all_file_fields())\n    ]\n</code></pre>"},{"location":"reference/prune_media/management/commands/prune_media/","title":"prune_media","text":""},{"location":"reference/prune_media/management/commands/prune_media/#src.prune_media.management.commands.prune_media.prune_media","title":"prune_media","text":"<pre><code>prune_media(self, no_interaction: Annotated[bool, typer.Option(help=_(\"Don't ask for confirmation before deleting.\"), is_flag=True)] = False, dry_run: Annotated[bool, typer.Option(help=_('Do a dry-run without deleting anything.'), is_flag=True)] = False) -&gt; None\n</code></pre> <p>Remove unreferenced media files to save space.</p> <p>Parameters:</p> Name Type Description Default <code>no_interaction</code> <code>bool</code> <p>Do not prompt the user for confirmation before proceeding to deletion.</p> <code>False</code> <code>dry_run</code> <code>bool</code> <p>Don't delete anything, just display what would be done.</p> <code>False</code> Source code in <code>src/prune_media/management/commands/prune_media.py</code> <pre><code>@app.command()\ndef prune_media(\n    self,\n    no_interaction: Annotated[  # noqa: FBT002\n        bool,\n        typer.Option(\n            help=_(\"Don't ask for confirmation before deleting.\"), is_flag=True\n        ),\n    ] = False,\n    dry_run: Annotated[  # noqa: FBT002\n        bool,\n        typer.Option(help=_(\"Do a dry-run without deleting anything.\"), is_flag=True),\n    ] = False,\n) -&gt; None:\n    \"\"\"Remove unreferenced media files to save space.\n\n    Args:\n        no_interaction (bool): Do not prompt the user for confirmation before proceeding\n            to deletion.\n        dry_run (bool): Don't delete anything, just display what would be done.\n\n    \"\"\"\n    file_paths = get_unreferenced_media_paths()\n    if len(file_paths) == 0:\n        self.secho(_(\"No unreferenced media files found! :-)\"), fg=typer.colors.GREEN)\n        raise typer.Exit()\n    for file_path in file_paths:\n        self.secho(file_path)\n    self.echo(\"\")\n    if dry_run:\n        self.secho(\n            _(f\"This would delete {len(file_paths)} unreferenced media files.\"),\n            fg=typer.colors.GREEN,\n        )\n        raise typer.Exit()\n    if not no_interaction:  # no cov, pytest refuses to let me test this\n        confirm = typer.confirm(\n            typer.style(\n                _(\n                    f\"Are you sure you want to delete these {len(file_paths)} \"\n                    \"unreferenced media files?\"\n                ),\n                fg=typer.colors.YELLOW,\n            )\n        )\n        if not confirm:\n            self.secho(_(\"Aborting!\"), fg=typer.colors.RED)\n            raise typer.Exit()\n    total_deleted = 0\n    with Progress() as progress:\n        deletion_task = progress.add_task(\n            \"[red]Deleting unreferenced media files...\", total=len(file_paths)\n        )\n        for file_path in file_paths:\n            try:\n                self.secho(f\"Deleting {file_path}...\")\n                default_storage.delete(file_path)\n                total_deleted += 1\n            except Exception as err:  # no cov\n                self.secho(\n                    _(\n                        f\"\"\"Could not delete {file_path}!\n                    \"\"\"\n                        f\"\"\"Exception details: {err}\"\"\"\n                    ),\n                    err=True,\n                )\n            progress.update(deletion_task, advance=1)\n        progress.update(deletion_task, completed=len(file_paths))\n    self.secho(\n        _(f\"Deleted {total_deleted} unreferenced media files.\"), fg=typer.colors.GREEN\n    )\n</code></pre>"},{"location":"reference/prune_media/management/commands/show_empty_media_dirs/","title":"show_empty_media_dirs","text":""},{"location":"reference/prune_media/management/commands/show_empty_media_dirs/#src.prune_media.management.commands.show_empty_media_dirs.show_empty_media_dirs","title":"show_empty_media_dirs","text":"<pre><code>show_empty_media_dirs(self, clean: Annotated[bool, typer.Option(help=_('Print paths only so they can be piped to other commands'), is_flag=True)] = False) -&gt; None\n</code></pre> <p>List empty media directories.</p> <p>The storage API does not support deletion of directories but at least this way you know what can be removed.</p> <p>Parameters:</p> Name Type Description Default <code>clean</code> <code>bool</code> <p>Display the list of empty media directories with no formatting or additional text so that it can be piped to another command.</p> <code>False</code> Source code in <code>src/prune_media/management/commands/show_empty_media_dirs.py</code> <pre><code>@app.command()\ndef show_empty_media_dirs(\n    self,\n    clean: Annotated[  # noqa: FBT002\n        bool,\n        typer.Option(\n            help=_(\"Print paths only so they can be piped to other commands\"),\n            is_flag=True,\n        ),\n    ] = False,\n) -&gt; None:\n    \"\"\"List empty media directories.\n\n    The storage API does not support deletion of directories but at least this\n    way you know what can be removed.\n\n    Args:\n        clean (bool): Display the list of empty media directories with no formatting or\n            additional text so that it can be piped to another command.\n    \"\"\"\n    empty_dirs = get_empty_media_directories(storage_backend=default_storage)\n    if not empty_dirs:\n        if not clean:\n            self.echo(_(\"No empty media directories.\"))\n        raise typer.Exit()\n    for empty_dir in empty_dirs:\n        self.echo(empty_dir)\n    if not clean:\n        self.echo(_(f\"Found {len(empty_dirs)} empty media directories.\"))\n</code></pre>"}]}